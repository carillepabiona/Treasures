@page "/home"
@inject NavigationManager Navigation
@using System.Net;
@using System.Net.Sockets;
@using System.Text;
@using System.Threading.Tasks;
@using Treasure.Models;
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

<head>
    <link rel="stylesheet" href="HomeStyle.css">
    <script src="js/script.js"></script>
    <script src="js/jquery.cycle2.js"></script>
</head>

<SectionContent SectionName="page-buttons">
    <div id="searchBox" class="input-group header-search" style="display:none; width:500px; ">
        <span class="input-group-text text-warning"><i class="fa fa-search"></i></span>
        <input id="txtSearch" type="text" class="form-control" placeholder="Search" value="@Model.Search" @onchange="SearchTerm" />
        <span class="input-group-text" onclick="hideSearchBox()"><i class="fa fa-times"></i></span>
    </div>
    <span id="controlBox">
        <button class="btn text-warning" onclick="showSearchBox()">
            <i class="fa fa-search"></i>
        </button>
    </span>    
</SectionContent>

<!-- Cart Sidebar -->
<div id="cartSidebar" class="sidebar">
    <div class="cart-header">
        <i class="fa fa-chevron-right" onclick="toggleCart()" style="cursor: pointer;"></i>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMy Cart
    </div>
    <div class="cart-body" id="cartItems"></div>
    <div class="cart-footer">
        <p>Total: ₱<span id="cartTotal">0.00</span></p>
        <button class="checkout-btn" onclick="placeOrder()">Order Now</button>
    </div>
</div>

<!-- Chat Box -->
<div id="chatBox" class="sidebar" style="background-color: #FFECB3; border: 3px solid #FF6F00; width: 300px;">
    <div class="chat-header" onclick="toggleChat()" style="background-color: #FF6F00; color: white; padding: 10px; font-size: 18px;">
        Chat Box
    </div>
    <div class="chat-content" id="chatContent" style="height: 300px; width: 295px; overflow-y: auto; padding: 10px; background-color: #FFF3E0;">
        @foreach (var msg in Messages)
        {
            <div style="color: #5D4037; padding: 5px 0;">@msg</div>
        }
    </div>
    <div class="chat-input" style="padding: 5px; background-color: #FFECB3; margin: 5px;">
        <input @bind="OutgoingMessage" type="text" placeholder="Type a message..."
        style="width: 200px; padding: 10px; font-size: 16px; border: 1px solid #FF6F00; border-radius: 5px; margin: 5px;" />
        <button @onclick="SendMessageToSender"
        style="background-color: #FF6F00; color: white; padding: px; font-size: 16px; border: none; border-radius: 5px; margin-top: 5px;">
            Send
        </button>
    </div>
</div>

<!-- Cart Button -->
<button class="cart-button" onclick="toggleCart()">
    🛒
    <span id="cartBadge" class="badge" style="display: none;">0</span>
</button>

<!-- Chat Toggle Button -->
<button class="chat-toggle" onclick="toggleChat(event)">
    💬
    <span id="chatBadge" class="dot" style="display: none;"></span>
</button>

<!-- CATEGORIES --><!-- CATEGORIES --><!-- CATEGORIES --><!-- CATEGORIES --><!-- CATEGORIES --><!-- CATEGORIES -->
<section>
    <h4>FOOD CATEGORIES</h4>
    <div class="categories">
        <div class="category-card" @onclick="() => ShowAllItems()">
            <p>All</p>
        </div>
        @foreach (var category in FoodCategories)
        {
            <div class="category-card" @onclick="() => FilterCategory(category.Name)">
                <img src="@category.Image" alt="@category.DisplayName" />
                <p>@category.DisplayName</p>
            </div>
        }
    </div>
</section>

<!-- FILTERING FOOD ITEMS -->
<section id="filteredItems">
    <div class="food-items">
        <h4>FOOD ITEMS</h4>
        <div id="foodGrid" class="food-grid">
            @foreach (var item in FoodItemData.GetFoodItems())
            {
                <button class="food-card" @onclick="() => ShowFoodDetails(item)">
                    <img src="@item.Image" alt="@item.Name" />
                    <h6>@item.Name</h6>
                    <h6>₱@item.Price.ToString("F2")</h6>
                </button>
            }
        </div>
        @if (FoodItemData.SelectedFoodItem != null && showFoodDetailPanel)
        {
            <div id="food-detail-panel" class="food-detail-panel">
                <!-- Close Button (X) -->
                <button class="close-btn" @onclick="CloseFoodDetails">X</button>

                <img src="@FoodItemData.SelectedFoodItem.Image" alt="@FoodItemData.SelectedFoodItem.Name" />
                <h3>@FoodItemData.SelectedFoodItem.Name</h3>
                <p>@FoodItemData.SelectedFoodItem.Description</p>
                <h4>₱@FoodItemData.SelectedFoodItem.Price.ToString("F2")</h4>

                <div>
                    <button @onclick="DecreaseQuantity">-</button>
                    <span>@FoodItemData.Quantity</span>
                    <button @onclick="IncreaseQuantity">+</button>
                </div>

                <button @onclick="AddToCart">Add to Cart</button>
            </div>
        }
    </div>
</section>

<!-- Toggle Button for Food Detail Panel -->
<button class="toggle-food-detail-btn" @onclick="ToggleFoodDetailPanel"><i class="fa-solid fa-circle-chevron-left"></i></button>


@code {
    private List<FoodCategory> FoodCategories = FoodCategoryData.GetFoodCategories();
    private List<FoodItem> FoodItems = FoodItemData.GetFoodItems();
    private List<FoodItem> FilteredFoodItems { get; set; } = new List<FoodItem>();

    // Method to filter items by category
    private void FilterCategory(string category)
    {
        FilteredFoodItems = FoodItems.Where(item => item.Category.Equals(category, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    // Method to show all items
    private void ShowAllItems()
    {
        FilteredFoodItems = FoodItems; // Display all food items
    }
    /////////////////////  /////////////////////  /////////////////////  /////////////////////  /////////////////////

    private void ShowFoodDetails(FoodItem item)
    {
        FoodItemData.SelectedFoodItem = item; // Set selected food item
    }

    private bool showFoodDetailPanel = false; // Initially hidden

    // Toggle visibility of the food detail panel
    private void ToggleFoodDetailPanel()
    {
        showFoodDetailPanel = !showFoodDetailPanel;
    }

    private void DecreaseQuantity()
    {
        FoodItemData.DecreaseQuantity(); // Adjust quantity
    }

    private void IncreaseQuantity()
    {
        FoodItemData.IncreaseQuantity(); // Adjust quantity
    }

    private void AddToCart()
    {
        // Add to cart logic
        Console.WriteLine($"Added {FoodItemData.Quantity} of {FoodItemData.SelectedFoodItem.Name} to cart.");
        // You can store the cart data in a shared service or a local collection
    }

    /////////////////////  /////////////////////  /////////////////////  /////////////////////  /////////////////////

    private TcpListener _listener;
    private const int Port = 5000;
    private List<string> Messages = new();
    private string OutgoingMessage = "";

    private const string SenderIP = "192.168.254.143"; // Update to actual sender IP
    private const int SenderPort = 5000;

    protected override async Task OnInitializedAsync()
    {
        FilteredFoodItems = FoodItems;
        await StartListening();
    }

    private async Task StartListening()
    {
        try
        {
            _listener = new TcpListener(IPAddress.Any, Port);
            _listener.Start();

            while (true)
            {
                var client = await _listener.AcceptTcpClientAsync();
                _ = HandleClient(client);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task HandleClient(TcpClient client)
    {
        try
        {
            using var stream = client.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
            string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);

            Messages.Add($"Sender: {message}");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Client handling error: {ex.Message}");
        }
    }

    private async Task SendMessageToSender()
    {
        if (!string.IsNullOrWhiteSpace(OutgoingMessage))
        {
            try
            {
                using var client = new TcpClient();
                await client.ConnectAsync(SenderIP, SenderPort);

                using var stream = client.GetStream();
                byte[] data = Encoding.UTF8.GetBytes(OutgoingMessage);
                await stream.WriteAsync(data, 0, data.Length);

                Messages.Add($"You: {OutgoingMessage}");
                OutgoingMessage = "";
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Sending error: {ex.Message}");
            }
        }
    }
    //////////////////////// //////////////////////////////////////////////////
    ///
    public class CartItem
    {
        public FoodItem Item { get; set; }
        public int Quantity { get; set; }
    }

    private List<CartItem> Cart = new();

   @* private void AddToCart()
    {
        var existing = Cart.FirstOrDefault(c => c.Item.Name == FoodItemData.SelectedFoodItem.Name);
        if (existing != null)
            existing.Quantity += FoodItemData.Quantity;
        else
            Cart.Add(new CartItem { Item = FoodItemData.SelectedFoodItem, Quantity = FoodItemData.Quantity });

        FoodItemData.Quantity = 1;
        showFoodDetailPanel = false;
    }*@
}
