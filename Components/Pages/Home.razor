@page "/"
@inject NavigationManager Navigation
@using System.Net;
@using System.Net.Sockets;
@using System.Text;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

<head>
    <link rel="stylesheet" href="HomeStyle.css">
   
</head>

<SectionContent SectionName="page-buttons">
    <div id="searchBox" class="input-group header-search" style="display:none; width:500px; ">
        <span class="input-group-text text-warning"><i class="fa fa-search"></i></span>
        <input id="txtSearch" type="text" class="form-control" placeholder="Search" value="@Model.Search" @onchange="SearchTerm" />
        <span class="input-group-text" onclick="hideSearchBox()"><i class="fa fa-times"></i></span>
    </div>
    <span id="controlBox">
        <button class="btn text-warning" onclick="showSearchBox()">
            <i class="fa fa-search"></i>
        </button>
    </span>    
</SectionContent>


<!-- Cart Sidebar -->
@*<div id="cartSidebar" class="sidebar" style="background-color: FFECB3; border: 3px solid #FF6F00; width: 300px;">
    <div class="cart-header" onclick="toggleChat()" style="background-color: #FF6F00; color: white; padding: 10px; font-size: 18px;">
        Menu Cart
    </div>
    <div class="cart-body" id="cartItems" style="height: 400px; width: 295px; overflow-y: auto; padding: 10px; background-color: #FFF3E0;"> </div>
    <div class="cart-footer">
        <p>Total: ₱<span id="cartTotal">0.00</span></p>
        <button class="checkout-btn" onclick="placeOrder()">Order Now</button>
    </div>
</div>*@

<div id="cartSidebar" class="sidebar">
    <div class="cart-header">
        <i class="fa fa-chevron-right" onclick="toggleCart()" style="cursor: pointer;"></i>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMy Cart
    </div>
    <div class="cart-body" id="cartItems"></div>
    <div class="cart-footer">
        <p>Total: ₱<span id="cartTotal">0.00</span></p>
        <button class="checkout-btn" onclick="placeOrder()">Order Now</button>
    </div>
</div>

<!-- Chat Box -->
<div id="chatBox" class="sidebar" style="background-color: #FFECB3; border: 3px solid #FF6F00; width: 300px;">
    <div class="chat-header" onclick="toggleChat()" style="background-color: #FF6F00; color: white; padding: 10px; font-size: 18px;">
        Chat Box
    </div>
    <div class="chat-content" id="chatContent" style="height: 300px; width: 295px; overflow-y: auto; padding: 10px; background-color: #FFF3E0;">
        @foreach (var msg in Messages)
        {
            <div style="color: #5D4037; padding: 5px 0;">@msg</div>
        }
    </div>
    <div class="chat-input" style="padding: 5px; background-color: #FFECB3; margin: 5px;">
        <input @bind="OutgoingMessage" type="text" placeholder="Type a message..."
               style="width: 200px; padding: 10px; font-size: 16px; border: 1px solid #FF6F00; border-radius: 5px; margin: 5px;" />
        <button @onclick="SendMessageToSender"
                style="background-color: #FF6F00; color: white; padding: px; font-size: 16px; border: none; border-radius: 5px; margin-top: 5px;">
            Send
        </button>
    </div>
</div>


<!-- Hero Section -->
<section id="adSection1" style="width:100%">
    <div class="cycle-slideshow">
        <img src="/28_Treasures_Menu/1.png" style="width:100%" />
        <img src="/28_Treasures_Menu/2.png" style="width:100%" />
    </div>
</section>

<section>
    <h4>FOOD CATEGORIES</h4>
    <div class="categories">
        @foreach (var category in FoodCategories)
        {
            <div class="category-card" onclick="filterCategory('@category.Name')">
                <img src="@category.Image" alt="@category.DisplayName" />
                <p>@category.DisplayName</p>
            </div>
        }
    </div>
</section>

<section id="filteredItems">
    <!-- Food Items Section -->
    <div class="food-items">
        <h4>FOOD ITEMS</h4>
        <div class="food-grid" id="foodGrid">
            <!-- Food items dynamically added here -->
        </div>
    </div>
</section>
<!-- Chat History -->
<div id="chatHistory" class="chat-history">
    <!-- Messages will appear here -->
</div>


<!-- Cart Button -->
<button class="cart-button" onclick="toggleCart()">
    🛒
    <span id="cartBadge" class="badge" style="display: none;">0</span>
</button>

<button class="chat-toggle" onclick="toggleChat(event)">
    💬
    <span id="chatBadge" class="badge" style="display: none;">0</span> <!-- Updated to use a number badge -->
</button>

<script src="js/jquery.cycle2.js"></script>
<script src="js/script.js"></script>

 @code{
    private int UnreadMessagesCount = 0;  // Track unread messages
    public class FoodCategory   
    {
        public string Name { get; set; }           // used for filterCategory('...')
        public string DisplayName { get; set; }    // shown as <p> text
        public string Image { get; set; }          // image src
    }

    private List<FoodCategory> FoodCategories = new()
    {
        new FoodCategory { Name = "Appetizer", DisplayName = "Appetizer", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Rice", DisplayName = "Rice", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Soup", DisplayName = "Soup", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Noodles", DisplayName = "Noodles", Image = "28_Treasures_Menu/Hofan_Noodles.jpg" },
        new FoodCategory { Name = "Noodles Mami", DisplayName = "Noodles Mami", Image = "28_Treasures_Menu/Yang_Chow_Fried_Rice.jpg" },
        new FoodCategory { Name = "Congee", DisplayName = "Congee", Image = "28_Treasures_Menu/Hakaw.jpg" },
        new FoodCategory { Name = "Dimsum", DisplayName = "Dimsum", Image = "28_Treasures_Menu/Kutchay_Dumpling.jpg" },
        new FoodCategory { Name = "Sweet Dessert", DisplayName = "Sweet Dessert", Image = "28_Treasures_Menu/Hakaw.jpg" },
        new FoodCategory { Name = "Vegetables", DisplayName = "Vegetables", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Beef", DisplayName = "Beef", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Pork", DisplayName = "Pork", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Chicken", DisplayName = "Chicken", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Seafood", DisplayName = "Seafood", Image = "28_Treasures_Menu/Polonchay_with_three_mushrooms.jpg" },
        new FoodCategory { Name = "Drinks", DisplayName = "Drinks", Image = "28_Treasures_Menu/Hakaw.jpg" }
    };
    private string CartClass = "";
    private List<string> cartItems = new List<string>();

    void ToggleCart()
    {
        CartClass = CartClass == "open" ? "" : "open";
    }

    void ToggleChat()
    {
        // Similar logic for chat
    }

    private HashSet<int> favoriteItems = new HashSet<int>();

    private bool IsFavorite(int itemId) => favoriteItems.Contains(itemId);

    private void ToggleFavorite(int itemId)
    {
        if (favoriteItems.Contains(itemId))
            favoriteItems.Remove(itemId);
        else
            favoriteItems.Add(itemId);
    }

    private TcpListener _listener;
    private const int Port = 5000;
    private List<string> Messages = new();
    private string OutgoingMessage = "";

    private const string SenderIP = "192.168.254.159"; // Update to actual POS/ADMIN IP
    private const int SenderPort = 5000;

    protected override async Task OnInitializedAsync()
    {
        await StartListening();
    }

    private async Task StartListening()
    {
        try
        {
            _listener = new TcpListener(IPAddress.Any, Port);
            _listener.Start();

            while (true)
            {
                var client = await _listener.AcceptTcpClientAsync();
                _ = HandleClient(client);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task HandleClient(TcpClient client)
    {
        try
        {
            using var stream = client.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
            string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);

            // Add the incoming message to the list and update unread message count
            Messages.Add($"Sender: {message}");
            UnreadMessagesCount++;  // Increment unread message count

            // Trigger JavaScript function to show chat notification
            await JS.InvokeVoidAsync("receiveNewMessage", message);

            // Optionally update the UI with the message
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Client handling error: {ex.Message}");
        }
    }

    private async Task SendMessageToSender()
    {
        if (!string.IsNullOrWhiteSpace(OutgoingMessage))
        {
            try
            {
                using var client = new TcpClient();
                await client.ConnectAsync(SenderIP, SenderPort);

                using var stream = client.GetStream();
                byte[] data = Encoding.UTF8.GetBytes(OutgoingMessage);
                await stream.WriteAsync(data, 0, data.Length);

                Messages.Add($"You: {OutgoingMessage}");
                OutgoingMessage = "";
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Sending error: {ex.Message}");
            }
        }
    }
    public class CartItem
    {
        public string Name { get; set; }
        public string ImageUrl { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }

    List<CartItem> CartItems = new()
    {
        
    };

    decimal Total => CartItems.Sum(x => x.Quantity * x.Price);

    void IncreaseQuantity(CartItem item) => item.Quantity++;
    void DecreaseQuantity(CartItem item) { if (item.Quantity > 1) item.Quantity--; }
    void RemoveItem(CartItem item) => CartItems.Remove(item);
    void PlaceOrder() => Console.WriteLine("Order placed!");
 }