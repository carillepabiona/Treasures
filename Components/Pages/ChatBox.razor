@page "/chatbox"

@using System.Net;
@using System.Net.Sockets;
@using System.Text;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime

<h3 style="color: #FF6F00; font-family: Arial, sans-serif;">Chat Box</h3>

<!-- Chat UI -->
<div style="border: 2px solid #FF6F00; padding: 15px; width: 320px; background-color: #FFECB3; border-radius: 8px;">
    <div style="height: 200px; overflow-y: auto; border-bottom: 2px solid #FF6F00; padding: 10px; background-color: #FFF3E0;">
        @foreach (var msg in Messages)
        {
            <div style="color: #5D4037; padding: 5px 0;">@msg</div>
        }
    </div>
    <input @bind="OutgoingMessage" placeholder="Type a message..."
           style="width: 200px; padding: 10px; font-size: 16px; margin-top: 10px; border: 1px solid #FF6F00; border-radius: 5px;" />
    <button @onclick="SendMessageToSender"
            style="background-color: #FF6F00; color: white; padding: 10px; font-size: 16px; border: none; border-radius: 5px; margin-top: 5px; cursor: pointer;">
        Send
    </button>
</div>



<!-- Signal Indicator Button -->
@* <button @onclick="StartListening" style="background-color:@ButtonColor; color:white; padding:15px; font-size:18px; margin-top: 10px;"> *@
@*     @ButtonText *@
@* </button> *@

@code {
    private TcpListener _listener;
    private const int Port = 5000;
    private string ButtonText = "Waiting for Signal...";
    private string ButtonColor = "red";
    private List<string> Messages = new();
    private string OutgoingMessage = "";

    private const string SenderIP = "192.168.254.143"; // Replace with actual sender IP (reverse of receiver)
    private const int SenderPort = 5000; // Same port unless different for sender

    protected override async Task OnInitializedAsync()
    {
        await StartListening();
    }

    private async Task StartListening()
    {
        try
        {
            _listener = new TcpListener(IPAddress.Any, Port);
            _listener.Start();
            Console.WriteLine("Server started...");

            while (true)
            {
                var client = await _listener.AcceptTcpClientAsync();
                _ = HandleClient(client);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task HandleClient(TcpClient client)
    {
        try
        {
            using var stream = client.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
            string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);

            Messages.Add($"Sender: {message}");
            if (message == "PRESS")
            {
                ButtonColor = "green";
                ButtonText = "Signal Received!";
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Client handling error: {ex.Message}");
        }
    }

    private async Task SendMessageToSender()
    {
        if (!string.IsNullOrWhiteSpace(OutgoingMessage))
        {
            try
            {
                using var client = new TcpClient();
                await client.ConnectAsync(SenderIP, SenderPort);

                using var stream = client.GetStream();
                byte[] data = Encoding.UTF8.GetBytes(OutgoingMessage);
                await stream.WriteAsync(data, 0, data.Length);

                Messages.Add($"You: {OutgoingMessage}");
                OutgoingMessage = "";
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Sending error: {ex.Message}");
            }
        }
    }
}